/**
 *  Copyright 2015 SmartThings
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *	Elko ESH 316 Endevender RF
 *
 *  Usage: After pairing and using this DH for the respective device, set up automation in smartthings to mirror the endevender with another dimmer. The SmartLighting SmartApp can be used
 *
 *	Author: Nils-Martin Skaanes, 
 *  Thanks for contributing: Tor AndrÃ© Roland, Antonio Barril
 *	Date: 2020-05-07
 */

metadata {
	definition (name: "Elko Dimmer-Endevender", namespace: "nilskaa@gmail.com", author: "Nils-Martin Skaanes", vid:"generic-dimmer") {
		capability "Actuator"
		capability "Configuration"
		capability "Refresh"
		capability "Switch"
		capability "Switch Level"
		capability "Light"
		
		//Raw code from elko dimmer-endevender: 01 0104 0104 00 02 0000 0003 03 0003 0006 0008
		fingerprint profileId: "0104", inClusters: "0000, 0003", outClusters: "0003, 0006, 0008"
	}
	
	tiles(scale: 2) {
		multiAttributeTile(name:"switch", type: "lighting", width: 6, height: 4, canChangeIcon: true){
			tileAttribute ("device.switch", key: "PRIMARY_CONTROL") {
				attributeState "on", label:'${name}', action:"switch.off", icon:"st.switches.light.on", backgroundColor:"#00A0DC", nextState:"turningOff"
				attributeState "off", label:'${name}', action:"switch.on", icon:"st.switches.light.off", backgroundColor:"#ffffff", nextState:"turningOn"
				attributeState "turningOn", label:'${name}', action:"switch.off", icon:"st.switches.light.on", backgroundColor:"#00A0DC", nextState:"turningOff"
				attributeState "turningOff", label:'${name}', action:"switch.on", icon:"st.switches.light.off", backgroundColor:"#ffffff", nextState:"turningOn"
			}
			tileAttribute ("device.level", key: "SLIDER_CONTROL") {
				attributeState "level", action:"switch level.setLevel"
			}
		}
	standardTile("refresh", "device.refresh", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
		state "default", label:"", action:"refresh.refresh", icon:"st.secondary.refresh"
	}
        standardTile("configure", "device.configure", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
		state "configure", label:'', action:"configuration.configure", icon:"st.secondary.configure"
	}
        main "switch"
        details(["switch", "refresh", "configure"])
	}
    
    preferences {
		input name: "dimammount", type: "number", title: "Dimmer ammount", description: "dimming ammount pr click (eg. 5%)", required: true
        input name: "dim2five", type: "bool", title: "Dim to 5%", description: "Stop diming at 5%", required: true
	}
}

// Parse incoming device messages to generate events
def parse(String description) {
	log.debug "description is $description"
	def descMap = zigbee.parseDescriptionAsMap(description)
	def cluster_id = descMap.clusterId   
	
	// on/off button was pressed:
    //Todo: find out what causes the out of sync behaviour between the master dimmer and the endevender - causing a double press to be required some times.
    
	if(cluster_id=="0006"){
		if(state.onoff == null) {
			log.debug "onoff state was NULL"
			state.onoff = "off"
		}
		if(state.onoff == "off") {
			log.debug "onoff state was off, now setting to ON"
			state.onoff = "on"
		}
		else {
			log.debug "onoff state is assumed to be on, now setting to OFF"
			state.onoff = "off"
		}
			
		sendEvent(name: "switch", value: state.onoff, isStateChange: true)
	}
	
	//dimmer was adjusted up/down
	if(cluster_id=="0008"){
		def data=descMap.data[0]
		log.debug "DIMMER=" + data
        
        //check if dimmamount is set in the preferences:
        if (dimammount == null) log.debug "dimammount has not been set in the app preferences"
        
        //Todo: Set default dimammount (this does not work from the preferences)
        //Oweride the dimammount value if it is null (set it to 5)
        //Can be achieved by using a state variable, set to 5 if dimammount=null and transfering the dimammount to the state variable if it set.
        
        //Do some boundary checks:
		if(state.dimlevel == null) state.dimlevel = 50
		if(state.dimlevel > 100) state.dimlevel = 50
		if(state.dimlevel < 0) state.dimlevel = 50
           
        log.debug "Going into checking the data attribute: 00=increase, 01=decrease"
		if(data=="00") {
			log.debug "dimmer level increase"
			if (state.dimlevel < 100) state.dimlevel = state.dimlevel + dimammount
		}
		else if (data=="01") {
			log.debug "dimmer level decrease"
            //stop at 5% if selected in preference else dim to 0 allowing for turning off the dimmer:
            if (dim2five && state.dimlevel > 5) state.dimlevel = state.dimlevel - dimammount
            else if (!dim2five && state.dimlevel > 0) state.dimlevel = state.dimlevel - dimammount  
		}
		sendEvent(name: "level", value: state.dimlevel)
	}
	return result 
}

def setLevel(value) {
    zigbee.setLevel(value)
}

def refresh() {
    log.debug "Refresh pushed" 

	//reset the level value to 50:
	state.dimlevel = 50
    sendEvent(name: "level", value: state.dimlevel)
    
    log.debug "finnished refreshing"
}

def configure() {  
    log.debug "binding to on/off cluster"
	[
	 "zdo bind 0x${device.deviceNetworkId} 1 1 0x006 {${device.zigbeeId}} {}"
	]
    
	log.debug "binding to level cluster"
	[
	 "zdo bind 0x${device.deviceNetworkId} 1 1 0x008 {${device.zigbeeId}} {}"
	]
    
	log.debug  "set up reporting on: on/off and level"
	[
	 zigbee.configureReporting(0x006, 0x0000, 0x10, 0, 3600, null) +
	 zigbee.configureReporting(0x008, 0x0000, 0x20, 0, 3600, 0x0001)  
	] 
}
